{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport createSagaMiddleware from 'redux-saga'; //import thunk from 'redux-thunk'\n\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\"; //const middlewares = [thunk];/\n// redux-saga implementation\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware]; // apply redux logger\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n} // spread all the methods in the array\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); //sagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store); // persisted version of store\n\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/enan/Documents/GitHub/clothing-store/clothing-fashion/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","createSagaMiddleware","logger","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB,C,CACA;;AACA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBP,MAAjB;AACH,C,CAED;;;AACA,OAAO,MAAMQ,KAAK,GAAGZ,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGM,WAAJ,CAA7B,CAAzB,C,CAEP;;AAEA,OAAO,MAAMM,SAAS,GAAGX,YAAY,CAACU,KAAD,CAA9B,C,CAAuC;;AAC9C,eAAe;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport createSagaMiddleware from 'redux-saga'\n//import thunk from 'redux-thunk'\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./root-reducer\";\n\n//const middlewares = [thunk];/\n// redux-saga implementation\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware]\n// apply redux logger\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n}\n\n// spread all the methods in the array\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\n//sagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store); // persisted version of store\nexport default { store, persistor };\n"]},"metadata":{},"sourceType":"module"}